#+TITLE: Nota De Clase1
* ¿Qué es la Lógica?

- Habilidad determinar respuestas correctas
- Estudio inferencía formal
- Razonamiento
** ¿Por qué estudiar lógica(computacional)?

- *Es el cálculo de la computación*, un fundamento matemático para tratar información y razonar acerca del comportamiento de programas.
- Muchos problemas computacionales imvolucran lógica en su represnetación o solución.
- Es parte fundamental de los métodos formales.
  + Los métodos formales son:
    - ~especificar~
      Notaciones formales como definiciones
    - ~desarrollar~
      Semántica operacional o axiomática
    - ~verificar~
      Demostrar propiedades

* Argumentos Lógicos

Una colección finita de afirmaciones(proposiciones) dividida en *premisas* y *conclusión*, estas susceptibles de recibir un valor de verdad.Un argumento lógico puede ser correcto o incorrecto.

|Problema central de la lógica | verificar la correctud de un argumento lógico|

** ¿Cómo decidir si un argumento es correcto?

Usando la lógica como un medio, un argumento es correcto o válido si *suponiendo que sus premisas son ciertas, entonces necesariamente la conclusión también lo es.*

** Características de un argumento lógico

 - Los argumentos involucran *individuos*
     + Los individuos tienen *propiedes*
         + *Proposición* oración (habla de las prop. de los indiv) pueden clasificarse como *verdaderas* o *falsas*.
             + Se clasifican como premisas y conclusión.
 - Un argumento puede ser correcto(válido) o incorrecto(inválido) (NUnca es verdadero ni falso)

* Sistema Lógicos

Cualquier sistema lógico consta de al menos

- *Sintaxis:* Lenguaje Formal.
- *Semántica:* Mecanismo/Significado.
- *Teoría de prueba:* Decide la correctud de un argumento lógico por medios puramente sintácticos.
** Propiedades de SL
- *Consistencia:* NO hay contradicciones.
- *Correctud:* No puedes encontrar una inferencia falsa a partir de una verdad.
- *Completud:* Todo lo verdadero es demostrable.

* Lógica prposicional
Sistema lógico más simple, se encarga del manejo de proposiciones mediante conectivos lógicos.

| Proposición | un enunciado que puede calificarse como verdadero o falso | NO es Proposición ¿?, ¡! |

** PROP
Un lenguaje formal para la lógica de proposiciones. El alfabeto consta:
- *Símbolos o variables proposicionales (# infinito):* p_1,p_2,p_3,...
- *Constantes lógicas:* \top , \bot
- *Conectivos lógicos:* \neg,\vee, \wedge, \rightarrow, \leftrightarrow
- *Símbolos auxiliares:* (, )
*** ATOM

Conjutno de expresiones o fórmulas atómicas consta:
- Varibles propisicionales p_1,p_2,...,p_n,..
- Constantes \top, \bot

Las expresiones que forman a *PROP* (fórmulas), se definen *recursivamente*:

1. Si \varphi\in *ATOM* entonces \varphi\in *PROP*. Todo fórmula atómica es una fórmula.
2. Si \varphi\in *PROP* entonces (\neg\varphi)\in *PROP*.
3. Si \verphi ,\psi\in *PROP* entonces

(\varphi\vee\psi),..\in *PROP*.
4. Son todas. ~Garantiza el mínimo conjunto cerrado bajo las 3 reglas.~
**** Bakus-Naur
#+BEGIN_CENTER
\varphi,\psi ::= VarP|\top|\bot|(\neg\varphi)|(\varphi\vee\psi)|(\varphi\wedge\psi)|(\varphi\rightarrow\psi)|(\varphi\leftrightarrow\psi)

VarP::= p_1|p_2|...|p_n|...
#+END_CENTER
*** Precedencia y Asociatividad de OL

| Operadores      | Descripción             | Asociatividad |
|-----------------+-------------------------+---------------|
| \vee, \wedge    | Conjunción y disyunción | izquierda     |
| \rightarrow     | Implicación             | derecha       |
| \leftrightarrow | bicondicional           | izquierda     |

* Definición recursiva y Principio de Inducción

Una definición recursiva consiste en definir propiedades o funciones de una estructira de datos mediante un análisis de casos. Para probar propiedades acerca de la estructura o funciones definidas recursivamente se usa el principio de inducción estructural para fórmulas.
+ Definición recursiva para la función ~np:~ *PROP*\rightarrow\mathbb{N}
  #+BEGIN_CENTER
  np(\varphi) = 0 si \varphi es atómica
  np((\neg\varphi)) = np(\varphi)+2
  np((\varphi\star\psi)) = np(\varphi)+np(\psi)+2
  #+END_CENTER

*Def.1* ~Principio de Inducción Estructural para~ *PROP*.

Sea *P* una propiedad para las fórmulas de *PROP*, para probar que \forall fórmula \varphi\in *PROP* tiene la propiedad *P* se debe demostrar:

- CASO BASE: *toda variable proposicional tiene la propiedad P*
- HIPÓTESIS DE INDUCCIÓN: *suponer que se cumple la propiedad P para \varphi y \psi*
- PASO INDUCTIVO: *mostar, usando la hipotesis de inducción que*
    1. (\neg\varphi) cumple *P*
    2. (\varphi\star\psi) cumple con *P*, donde \star\in {\rightarrow,\wedge,\vee,\leftrightarrow}

** Ejercicios def. recursiva

- Profundidad de una fórmula: /depth(\varphi)/ devuelve la profundidad o altura del árbol de análisis sintáctico de \varphi.
  #+BEGIN_CENTER
  /depth(\varphi)/ = 0 si \varphi es atómica

  /depth(\neg\varphi)/ = /depth(\varphi)/ +1

  /depth(\varphi\star\psi)/ = max (/depth(\varphi)/)(/depth(\psi)/) + 1
  #+END_CENTER

- Número de conectivos de una fórmula: /con(\varphi)/ devuelve el número de conectivos de \varphi.
  #+BEGIN_CENTER
  /con(\varphi)/ = 0 si \varphi es atómica

  /con(\neg\varphi)/ = 1 +/con(\varphi)/

  /con(\varphi\star\psi)/ = 1 + /con(\varphi)/ +/con(\psi)/
  #+END_CENTER

- Variables de una fórmula:d /vars(\varphi)/ evuelve el conjunto o lista de variables que figuran en \varphi (sin repeticiones).
  #+BEGIN_CENTER
   /vars(\varphi)/ = \varphi si \varphi es atómica

   /vars(\neg\varphi)/ = /vars(\varphi)/

   /vars(\varphi\star\psi)/ = /vars(\varphi)/ si \varphi == \psi sino /vars(\varphi)/ + /vars(\psi)/
  #+END_CENTER

- Atómicas en una fórmula: /atom(\varphi)/ devuelve el número de presencias de fórmulas atómicas en \varphi.

  #+BEGIN_CENTER
   /atom(\varphi)/ = 1 si \varphi es atómica

   /atom(\neg\varphi)/ =  /atom(\varphi)/

   /atom(\varphi\star\psi)/ = /atom(\varphi)/ +  /atom(\psi)/
  #+END_CENTER

** Ejercicios inducción estructural
- /con(\varphi)< 2**(/depth(\varphi)/)/

  *Demostración.* Inducción sobre la fórmula \varphi

  *Base de inducción:* Sea \varphi una fórmula atómica. Probaremos que se cumple para \varphi.

  Es fácil verificar por como están definidas las funciones /con()/ y /depth()/ para una fórmula atómica. Por lo tanto

  con(\varphi) = 0 < 1 =2**0= 2**(depth(\varphi))

  *Hipótesis de inducción:* Supongamos que

   /con(\varphi)< 2**(/depth(\varphi)/)/  y  /con(\psi)< 2**(/depth(\psi)/)/

   *Paso inductivo:* Probamos la propiedad para \neg\varphi y \varphi\star\psi

   /con(\neg\varphi)/ = 1 + /con(varphi)/ por def. de /con()/


  /con(\varphi\star\psi)/ = 1 + /con(\varphi)/ + /con(\psi)/

-------------------------------------------- --

 -  /depth(\varphi)\leq com(\varphi)/

   *Demostración.* Inducción sobre la fórmula \varphi

    *Base de inducción:* Sea \varphi una fórmula atómica. Probaremos que se cumple para \varphi.

       Es fácil verificar por como están definidas las funciones /con()/ y /depth()/ para una fórmula atómica. Por lo tanto

       /depth(\varphi)/= 0\leq 0 =/con(\varphi)/

   *Hipótesis de inducción:* Supongamos que

        /depth(\varphi)\leq con(\varphi)/ y /depth(\psi)\leq con(\psi)/

   *Paso inductivo:* Probamos la propiedad para \neg\varphi y \varphi\star\psi

      Para \neg\varphi :

       Por definición de /depth/ tenemos

         /depth(\neg\varphi)/ =  1 + depth(\varphi)

       Por hipótesis de inducción tenemos  /depth(\varphi)\leq con(\varphi)/ sumando 1 de ambos lados de la desigualdad tenemos

           1 + /depth(\varphi)\leq con(\varphi)/ +1

       Por como está definida la función /con/ sabemos que /con(\varphi)/ +1/ = /con(\neg\varphi)/.

       De lo anterior tenemos lo siguiente

        /depth(\neg\varphi)/ =  1 + depth(\varphi) \leq  1 + /con(\varphi)/ = /con(\neg\varphi)/

       Es decir  /depth(\neg\varphi)/ \leq /con(\neg\varphi)/

       Por tanto se cumple la propiedad para \neg\varphi

       Para  \varphi\star\psi

       Por definición de /depth/ tenemos

       depth(\varphi\star\psi) =  max (depth(\varphi))(depth(\psi))+ 1

       /Obs/. El número de conectivos lógicos de una fórmula siempre será mayor igual a 0.

       De donde tenemos dos casos

       *Caso 1:* Si /max (depth(\varphi))(depth(\psi))/ = /depth(\varphi)/+1

       Por *hipótesis de inducción* y sumando 1 a la desigualdad tenemos

       /depth(\varphi)/+1\leq /con(\varphi)/ +1

       Ahora, por /Obs/ sabemos que  /con(\varphi)/ +1 \leq /con(\varphi)/ + /con(\psi)/ +1 es decir

       /depth(\varphi)/+1\leq /con(\varphi)/ +1 \leq /con(\varphi)/ + /con(\psi) / +1

       Por transitividad

       /depth(\varphi)/+1\leq /con(\varphi)/ + /con(\psi) / +1

       Y como  /max (depth(\varphi))(depth(\psi))/ = /depth(\varphi)/+1 entonces

       /max (depth(\varphi))(depth(\psi))/ \leq   /con(\varphi)/ + /con(\psi) / +1

       Por tanto se cumple la propiedad.

       *Caso 2:*   Si /max (depth(\varphi))(depth(\psi))/ = /depth(\varphi)/+1

       Análogo al *Caso 1*

- /atom(\varphi)\leq 2con(\varphi)/ +1

  *Demostración:* Inducción sobre \varphi

  *Base de inducción:* Sea \varphi una fórmula atómica. Probaremos que se cumple para \varphi.

        Es fácil verificar por como están definidas las funciones /con()/ y /atom()/ para una fórmula atómica. Por lo tanto

       /depth(\varphi)/= 1\leq 1 =2(0)+1=/con(\varphi)/

  *Hipótesis de inducción:* Supongamos que

        /atom(\varphi)\leq  2con(\varphi)/ +1 y   /atom(\psi)\leq 2con(\psi)/ +1

  *Paso inductivo:* Probamos la propiedad para \neg\varphi y \varphi\star\psi

        Para \neg\varphi

        Por definición de /atom()/ tenemos

        /atom(\neg\varphi)/ = /atom(\varphi)/

        Por *hipótesis de inducción*

         /atom(\neg\varphi)/ = /atom(\varphi)/\leq /2 con(\varphi)/+1

        Por lo tanto se cumple la propiedad.

        Para \varphi\star\psi

        Por como esta definida /atom()/ tenemos

       atom(\varphi\star\psi) = atom(\varphi) + atom(\psi)

        /Obs/. Si a<= c y b<=d entonces a+b <= c+d (?)

        Por /Obs/ tenemos

        atom(\varphi) + atom(\psi)\leq (2con(\varphi)/ +1) + (2con(\psi)/ +1)

        Resolvemos el lado izquierdo de la desigualdad

         /(2con(\varphi)/ +1) + (2con(\psi)/ +1)/ = /2con(\varphi) + 2con(\psi) +2

        Factorizamos 2

         /2con(\varphi) + 2con(\psi) +2 = 2 (/con(\varphi) + con(\psi)/ +1)

        Por definición de /con()/ tenemos

         2(/con(\varphi) + con(\psi)/ +1) = 2(/con(\varphi\star\psi)/)

        Por tanto

         atom(\varphi\star\psi) =  2(/con(\varphi\star\psi)/)

         Por tanto se cumple la propiedad.

* Sustitución

Una operación sintáctica fundamental de las fórmulas proposicionales.
